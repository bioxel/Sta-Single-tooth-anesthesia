#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Initialize the LCD with the I2C address (usually 0x27 or 0x3F)
LiquidCrystal_I2C lcd(0x27, 16, 2); 

// Define pins
const int potPin = A0;    // Potentiometer connected to analog pin A0
const int motorPin = 6;   // PWM pin for motor control
const int startButton = 7; // Start/stop button
const int resetButton = 8; // Reset button

// Variables
int potValue = 0;          // Variable to store potentiometer value
float flowRatePerMin = 0;  // Flow rate in ml/min
float flowRatePerSec = 0;  // Flow rate in ml/sec
float totalConsumption = 0; // Total liquid consumed in ml
bool motorOn = false;      // Motor state (on/off)
unsigned long previousMillis = 0; // For tracking time
unsigned long interval = 1000;    // 1-second interval

void setup() {
  pinMode(motorPin, OUTPUT);      // Set motor pin as output
  pinMode(startButton, INPUT_PULLUP); // Set start button as input with pull-up
  pinMode(resetButton, INPUT_PULLUP); // Set reset button as input with pull-up
  Serial.begin(9600);             // Initialize serial monitor
  lcd.init();                     // Initialize the I2C LCD
  lcd.backlight();                // Turn on LCD backlight
  lcd.print("Initializing...");   // Welcome message
  delay(2000);                    // Wait for 2 seconds
  lcd.clear();
}

void loop() {
  // Read button states
  bool startButtonState = digitalRead(startButton);
  bool resetButtonState = digitalRead(resetButton);

  // Read potentiometer value (0 to 1023)
  potValue = analogRead(potPin);

  // Calculate flow rate based on potentiometer value
  flowRatePerMin = map(potValue, 0, 1023, 5, 40);
  flowRatePerSec = flowRatePerMin / 60.0;

  // Update liquid consumption every second
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    if (motorOn) { // Only update consumption if motor is running
      totalConsumption += flowRatePerSec; // Add current second's flow to total
    }
  }

  // Motor runs only when the start button is continuously pressed
  if (startButtonState == LOW) { // Button is pressed
    motorOn = true;
    analogWrite(motorPin, map(potValue, 0, 1023, 0, 255)); // Adjust motor speed
  } else { // Button is not pressed
    motorOn = false;
    analogWrite(motorPin, 0); // Turn off the motor
  }

  // Reset total consumption with the reset button
  if (resetButtonState == LOW) {  // Button pressed
    delay(200); // Debounce delay
    totalConsumption = 0; // Reset consumption
  }

  // Print values to serial monitor
  Serial.print("Motor: ");
  Serial.print(motorOn ? "ON" : "OFF");
  Serial.print(" | Flow Rate: ");
  Serial.print(flowRatePerSec, 2);
  Serial.print(" ml/sec | Total: ");
  Serial.print(totalConsumption, 2);
  Serial.println(" ml");

  // Display values on LCD
  lcd.setCursor(0, 0); // First row
  lcd.print("Flow: ");
  lcd.print(flowRatePerSec, 2);
  lcd.print(" ml/s");

  lcd.setCursor(0, 1); // Second row
  lcd.print("Total: ");
  lcd.print(totalConsumption, 2);
  lcd.print(" ml");

  delay(200); // Small delay for stability
}
